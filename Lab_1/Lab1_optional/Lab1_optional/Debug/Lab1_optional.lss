
Lab1_optional.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         00000180  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .exception    00000200  80002200  80002200  00002600  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000a0  80002400  80002400  00002800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  5 .bss          000000f0  00000008  00000008  00000000  2**2
                  ALLOC
  6 .heap         0000ef08  000000f8  000000f8  00000000  2**0
                  ALLOC
  7 .comment      00000030  00000000  00000000  000028a0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000000d0  00000000  00000000  000028d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 00000094  00000000  00000000  000029a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00000be3  00000000  00000000  00002a34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000354  00000000  00000000  00003617  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00000fdb  00000000  00000000  0000396b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000000c8  00000000  00000000  00004948  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000005c6  00000000  00000000  00004a10  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00000192  00000000  00000000  00004fd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macinfo 001dc0d7  00000000  00000000  00005168  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 18 .debug_ranges 00000090  00000000  00000000  001e1240  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:

  .global _start
  .type _start, @function
_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80000000:	fe cf df c0 	sub	pc,pc,-8256

80000004 <_trampoline>:
80000004:	e0 8f 10 00 	bral	80002004 <program_start>
	...

80002004 <program_start>:
  rjmp    program_start

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002004:	fe cf ff c4 	sub	pc,pc,-60

Disassembly of section .text:

80002008 <_get_interrupt_handler>:
80002008:	fe 78 08 00 	mov	r8,-63488
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
8000200c:	e0 69 00 83 	mov	r9,131
80002010:	f2 0c 01 0c 	sub	r12,r9,r12
80002014:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
80002018:	f2 ca ff c0 	sub	r10,r9,-64
8000201c:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80002020:	58 08       	cp.w	r8,0
80002022:	c0 21       	brne	80002026 <_get_interrupt_handler+0x1e>
80002024:	5e fd       	retal	0
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
80002026:	f0 08 12 00 	clz	r8,r8
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
		? _int_handler_table[int_grp]._int_line_handler_table[32
8000202a:	48 5a       	lddpc	r10,8000203c <_get_interrupt_handler+0x34>
8000202c:	f4 09 00 39 	add	r9,r10,r9<<0x3
80002030:	f0 08 11 1f 	rsub	r8,r8,31
80002034:	72 19       	ld.w	r9,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80002036:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
8000203a:	5e fc       	retal	r12
8000203c:	80 00       	ld.sh	r0,r0[0x0]
8000203e:	24 00       	sub	r0,64

80002040 <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
80002040:	e0 7d 00 00 	mov	sp,65536

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
  mtsr    AVR32_EVBA, r0
80002044:	fe c0 fe 44 	sub	r0,pc,-444

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
80002048:	e3 b0 00 01 	mtsr	0x4,r0

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
  lda.w   r1, _edata
8000204c:	d5 53       	csrf	0x15
  cp      r0, r1
8000204e:	30 80       	mov	r0,8
  brhs    idata_load_loop_end
80002050:	30 81       	mov	r1,8
  lda.w   r2, _data_lma
80002052:	02 30       	cp.w	r0,r1
idata_load_loop:
  ld.d    r4, r2++
80002054:	c0 72       	brcc	80002062 <idata_load_loop_end>
  st.d    r0++, r4
80002056:	fe c2 fb b6 	sub	r2,pc,-1098

8000205a <idata_load_loop>:
  cp      r0, r1
  brlo    idata_load_loop
8000205a:	a5 05       	ld.d	r4,r2++
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
8000205c:	a1 24       	st.d	r0++,r4
  lda.w   r1, _end
8000205e:	02 30       	cp.w	r0,r1
  cp      r0, r1
80002060:	cf d3       	brcs	8000205a <idata_load_loop>

80002062 <idata_load_loop_end>:
  brhs    udata_clear_loop_end
80002062:	30 80       	mov	r0,8
  mov     r2, 0
80002064:	e0 61 00 f8 	mov	r1,248
  mov     r3, 0
udata_clear_loop:
  st.d    r0++, r2
80002068:	02 30       	cp.w	r0,r1
  cp      r0, r1
8000206a:	c0 62       	brcc	80002076 <udata_clear_loop_end>
  brlo    udata_clear_loop
8000206c:	30 02       	mov	r2,0
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
8000206e:	30 03       	mov	r3,0

80002070 <udata_clear_loop>:
80002070:	a1 22       	st.d	r0++,r2
80002072:	02 30       	cp.w	r0,r1
80002074:	cf e3       	brcs	80002070 <udata_clear_loop>

80002076 <udata_clear_loop_end>:
80002076:	fe cf ff 9a 	sub	pc,pc,-102
8000207a:	d7 03       	nop

8000207c <mdelay>:
8000207c:	20 1d       	sub	sp,4
8000207e:	f8 0c 00 2c 	add	r12,r12,r12<<0x2
80002082:	f8 08 15 01 	lsl	r8,r12,0x1
80002086:	50 08       	stdsp	sp[0x0],r8
80002088:	40 08       	lddsp	r8,sp[0x0]
8000208a:	58 08       	cp.w	r8,0
8000208c:	c0 70       	breq	8000209a <mdelay+0x1e>
8000208e:	40 08       	lddsp	r8,sp[0x0]


void mdelay(int ms){
	long volatile cycles = (ms * CYCLES_PER_MS);
	while (cycles != 0){
		cycles--;
80002090:	20 18       	sub	r8,1
80002092:	50 08       	stdsp	sp[0x0],r8
#define BUTTON_PIN0 (1 << (GPIO_PUSH_BUTTON_0 & 0x1f))


void mdelay(int ms){
	long volatile cycles = (ms * CYCLES_PER_MS);
	while (cycles != 0){
80002094:	40 08       	lddsp	r8,sp[0x0]
80002096:	58 08       	cp.w	r8,0
80002098:	cf b1       	brne	8000208e <mdelay+0x12>
		cycles--;
	}
}
8000209a:	2f fd       	sub	sp,-4
8000209c:	5e fc       	retal	r12

8000209e <initLED>:

void initLED (void)
{
	volatile avr32_gpio_port_t * led0_port;
	led0_port = &AVR32_GPIO.port[LED0_PORT];
	led0_port->gpers = LED0_BIT_VALUE;
8000209e:	fe 78 11 00 	mov	r8,-61184
800020a2:	fc 19 08 00 	movh	r9,0x800
800020a6:	91 19       	st.w	r8[0x4],r9
	led0_port->ovrs = LED0_BIT_VALUE;
800020a8:	f1 49 00 54 	st.w	r8[84],r9
	led0_port->oders = LED0_BIT_VALUE;
800020ac:	f1 49 00 44 	st.w	r8[68],r9
	
	volatile avr32_gpio_port_t * led1_port;
	led1_port = &AVR32_GPIO.port[LED1_PORT];
	led1_port->gpers = LED1_BIT_VALUE;
800020b0:	fc 19 10 00 	movh	r9,0x1000
800020b4:	91 19       	st.w	r8[0x4],r9
	led1_port->ovrs = LED1_BIT_VALUE;
800020b6:	f1 49 00 54 	st.w	r8[84],r9
	led1_port->oders = LED1_BIT_VALUE;
800020ba:	f1 49 00 44 	st.w	r8[68],r9
	
	volatile avr32_gpio_port_t * led2_port;
	led2_port = &AVR32_GPIO.port[LED2_PORT];
	led2_port->gpers = LED2_BIT_VALUE;
800020be:	fc 19 20 00 	movh	r9,0x2000
800020c2:	91 19       	st.w	r8[0x4],r9
	led2_port->ovrs = LED2_BIT_VALUE;
800020c4:	f1 49 00 54 	st.w	r8[84],r9
	led2_port->oders = LED2_BIT_VALUE;
800020c8:	f1 49 00 44 	st.w	r8[68],r9
	
	volatile avr32_gpio_port_t * led3_port;
	led3_port = &AVR32_GPIO.port[LED3_PORT];
	led3_port->gpers = LED3_BIT_VALUE;
800020cc:	fc 19 40 00 	movh	r9,0x4000
800020d0:	91 19       	st.w	r8[0x4],r9
	led3_port->ovrs = LED3_BIT_VALUE;
800020d2:	f1 49 00 54 	st.w	r8[84],r9
	led3_port->oders = LED3_BIT_VALUE;	
800020d6:	f1 49 00 44 	st.w	r8[68],r9
}
800020da:	5e fc       	retal	r12

800020dc <main>:
int main (void)
{
800020dc:	eb cd 40 fe 	pushm	r1-r7,lr
800020e0:	20 1d       	sub	sp,4
	
	int i;
	
	initLED ();
800020e2:	f0 1f 00 28 	mcall	80002180 <main+0xa4>
	volatile int button_state0;
	volatile avr32_gpio_port_t * button_port0;
	button_port0 = &AVR32_GPIO.port[BUTTON_PORT0];
	
	button_port0 = &AVR32_GPIO.port[BUTTON_PORT0];
	button_port0->gpers = BUTTON_PIN0;
800020e6:	fe 78 12 00 	mov	r8,-60928
800020ea:	fc 19 01 00 	movh	r9,0x100
800020ee:	91 19       	st.w	r8[0x4],r9
	button_port0->oderc = BUTTON_PIN0;
800020f0:	f1 49 00 48 	st.w	r8[72],r9

	
	while(1) {
		button_state0 = button_port0->pvr & BUTTON_PIN0;
800020f4:	10 96       	mov	r6,r8

		//Event 1
		if(!button_state0){
			
				AVR32_GPIO.port[LED0_PORT].ovrt = LED0_BIT_VALUE;
800020f6:	fe 77 10 00 	mov	r7,-61440
800020fa:	fc 14 08 00 	movh	r4,0x800
				mdelay(500);
800020fe:	e0 65 01 f4 	mov	r5,500
				AVR32_GPIO.port[LED0_PORT].ovrt = LED0_BIT_VALUE;
				AVR32_GPIO.port[LED1_PORT].ovrt = LED1_BIT_VALUE;
80002102:	fc 13 10 00 	movh	r3,0x1000
				mdelay(500);
				AVR32_GPIO.port[LED1_PORT].ovrt = LED1_BIT_VALUE;
				AVR32_GPIO.port[LED2_PORT].ovrt = LED2_BIT_VALUE;				
80002106:	fc 12 20 00 	movh	r2,0x2000
				mdelay(500);
				AVR32_GPIO.port[LED2_PORT].ovrt = LED2_BIT_VALUE;
				AVR32_GPIO.port[LED3_PORT].ovrt = LED3_BIT_VALUE;			
8000210a:	fc 11 40 00 	movh	r1,0x4000
	button_port0->gpers = BUTTON_PIN0;
	button_port0->oderc = BUTTON_PIN0;

	
	while(1) {
		button_state0 = button_port0->pvr & BUTTON_PIN0;
8000210e:	6d 88       	ld.w	r8,r6[0x60]
80002110:	e6 18 01 00 	andh	r8,0x100,COH
80002114:	50 08       	stdsp	sp[0x0],r8

		//Event 1
		if(!button_state0){
80002116:	40 08       	lddsp	r8,sp[0x0]
80002118:	58 08       	cp.w	r8,0
8000211a:	cf a1       	brne	8000210e <main+0x32>
			
				AVR32_GPIO.port[LED0_PORT].ovrt = LED0_BIT_VALUE;
8000211c:	ef 44 01 5c 	st.w	r7[348],r4
				mdelay(500);
80002120:	0a 9c       	mov	r12,r5
80002122:	f0 1f 00 19 	mcall	80002184 <main+0xa8>
				AVR32_GPIO.port[LED0_PORT].ovrt = LED0_BIT_VALUE;
80002126:	ef 44 01 5c 	st.w	r7[348],r4
				AVR32_GPIO.port[LED1_PORT].ovrt = LED1_BIT_VALUE;
8000212a:	ef 43 01 5c 	st.w	r7[348],r3
				mdelay(500);
8000212e:	0a 9c       	mov	r12,r5
80002130:	f0 1f 00 15 	mcall	80002184 <main+0xa8>
				AVR32_GPIO.port[LED1_PORT].ovrt = LED1_BIT_VALUE;
80002134:	ef 43 01 5c 	st.w	r7[348],r3
				AVR32_GPIO.port[LED2_PORT].ovrt = LED2_BIT_VALUE;				
80002138:	ef 42 01 5c 	st.w	r7[348],r2
				mdelay(500);
8000213c:	0a 9c       	mov	r12,r5
8000213e:	f0 1f 00 12 	mcall	80002184 <main+0xa8>
				AVR32_GPIO.port[LED2_PORT].ovrt = LED2_BIT_VALUE;
80002142:	ef 42 01 5c 	st.w	r7[348],r2
				AVR32_GPIO.port[LED3_PORT].ovrt = LED3_BIT_VALUE;			
80002146:	ef 41 01 5c 	st.w	r7[348],r1

				mdelay(500);
8000214a:	0a 9c       	mov	r12,r5
8000214c:	f0 1f 00 0e 	mcall	80002184 <main+0xa8>
				AVR32_GPIO.port[LED3_PORT].ovrt = LED3_BIT_VALUE;
80002150:	ef 41 01 5c 	st.w	r7[348],r1
				AVR32_GPIO.port[LED2_PORT].ovrt = LED2_BIT_VALUE;
80002154:	ef 42 01 5c 	st.w	r7[348],r2
				mdelay(500);
80002158:	0a 9c       	mov	r12,r5
8000215a:	f0 1f 00 0b 	mcall	80002184 <main+0xa8>
				AVR32_GPIO.port[LED2_PORT].ovrt = LED2_BIT_VALUE;
8000215e:	ef 42 01 5c 	st.w	r7[348],r2
				AVR32_GPIO.port[LED1_PORT].ovrt = LED1_BIT_VALUE;	
80002162:	ef 43 01 5c 	st.w	r7[348],r3
				mdelay(500);
80002166:	0a 9c       	mov	r12,r5
80002168:	f0 1f 00 07 	mcall	80002184 <main+0xa8>
				AVR32_GPIO.port[LED1_PORT].ovrt = LED1_BIT_VALUE;
8000216c:	ef 43 01 5c 	st.w	r7[348],r3
				AVR32_GPIO.port[LED0_PORT].ovrt = LED0_BIT_VALUE;
80002170:	ef 44 01 5c 	st.w	r7[348],r4
				mdelay(500);		
80002174:	0a 9c       	mov	r12,r5
80002176:	f0 1f 00 04 	mcall	80002184 <main+0xa8>
				AVR32_GPIO.port[LED0_PORT].ovrt = LED0_BIT_VALUE;	
8000217a:	ef 44 01 5c 	st.w	r7[348],r4
8000217e:	cc 8b       	rjmp	8000210e <main+0x32>
80002180:	80 00       	ld.sh	r0,r0[0x0]
80002182:	20 9e       	sub	lr,9
80002184:	80 00       	ld.sh	r0,r0[0x0]
80002186:	20 7c       	sub	r12,7

Disassembly of section .exception:

80002200 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
80002200:	c0 08       	rjmp	80002200 <_evba>
	...

80002204 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
80002204:	c0 08       	rjmp	80002204 <_handle_TLB_Multiple_Hit>
	...

80002208 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
80002208:	c0 08       	rjmp	80002208 <_handle_Bus_Error_Data_Fetch>
	...

8000220c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
8000220c:	c0 08       	rjmp	8000220c <_handle_Bus_Error_Instruction_Fetch>
	...

80002210 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
80002210:	c0 08       	rjmp	80002210 <_handle_NMI>
	...

80002214 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
80002214:	c0 08       	rjmp	80002214 <_handle_Instruction_Address>
	...

80002218 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
80002218:	c0 08       	rjmp	80002218 <_handle_ITLB_Protection>
	...

8000221c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
8000221c:	c0 08       	rjmp	8000221c <_handle_Breakpoint>
	...

80002220 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
80002220:	c0 08       	rjmp	80002220 <_handle_Illegal_Opcode>
	...

80002224 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
80002224:	c0 08       	rjmp	80002224 <_handle_Unimplemented_Instruction>
	...

80002228 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
80002228:	c0 08       	rjmp	80002228 <_handle_Privilege_Violation>
	...

8000222c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
8000222c:	c0 08       	rjmp	8000222c <_handle_Floating_Point>
	...

80002230 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
80002230:	c0 08       	rjmp	80002230 <_handle_Coprocessor_Absent>
	...

80002234 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
80002234:	c0 08       	rjmp	80002234 <_handle_Data_Address_Read>
	...

80002238 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
80002238:	c0 08       	rjmp	80002238 <_handle_Data_Address_Write>
	...

8000223c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
8000223c:	c0 08       	rjmp	8000223c <_handle_DTLB_Protection_Read>
	...

80002240 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
80002240:	c0 08       	rjmp	80002240 <_handle_DTLB_Protection_Write>
	...

80002244 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
80002244:	c0 08       	rjmp	80002244 <_handle_DTLB_Modified>
	...

80002250 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
80002250:	c0 08       	rjmp	80002250 <_handle_ITLB_Miss>
	...

80002260 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
80002260:	c0 08       	rjmp	80002260 <_handle_DTLB_Miss_Read>
	...

80002270 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
80002270:	c0 08       	rjmp	80002270 <_handle_DTLB_Miss_Write>
	...

80002300 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
80002300:	c0 08       	rjmp	80002300 <_handle_Supervisor_Call>
80002302:	d7 03       	nop

80002304 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80002304:	30 0c       	mov	r12,0
80002306:	c8 1e       	rcall	80002008 <_get_interrupt_handler>
80002308:	58 0c       	cp.w	r12,0
8000230a:	f8 0f 17 10 	movne	pc,r12
8000230e:	d6 03       	rete

80002310 <_int1>:
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80002310:	30 1c       	mov	r12,1
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80002312:	c7 be       	rcall	80002008 <_get_interrupt_handler>
80002314:	58 0c       	cp.w	r12,0
80002316:	f8 0f 17 10 	movne	pc,r12
8000231a:	d6 03       	rete

8000231c <_int2>:
8000231c:	30 2c       	mov	r12,2
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000231e:	c7 5e       	rcall	80002008 <_get_interrupt_handler>
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80002320:	58 0c       	cp.w	r12,0
80002322:	f8 0f 17 10 	movne	pc,r12
80002326:	d6 03       	rete

80002328 <_int3>:
80002328:	30 3c       	mov	r12,3
8000232a:	c6 fe       	rcall	80002008 <_get_interrupt_handler>
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000232c:	58 0c       	cp.w	r12,0
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000232e:	f8 0f 17 10 	movne	pc,r12
80002332:	d6 03       	rete
80002334:	d7 03       	nop
80002336:	d7 03       	nop
80002338:	d7 03       	nop
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000233a:	d7 03       	nop
8000233c:	d7 03       	nop
8000233e:	d7 03       	nop
80002340:	d7 03       	nop
80002342:	d7 03       	nop
80002344:	d7 03       	nop
80002346:	d7 03       	nop
80002348:	d7 03       	nop
8000234a:	d7 03       	nop
8000234c:	d7 03       	nop
8000234e:	d7 03       	nop
80002350:	d7 03       	nop
80002352:	d7 03       	nop
80002354:	d7 03       	nop
80002356:	d7 03       	nop
80002358:	d7 03       	nop
8000235a:	d7 03       	nop
8000235c:	d7 03       	nop
8000235e:	d7 03       	nop
80002360:	d7 03       	nop
80002362:	d7 03       	nop
80002364:	d7 03       	nop
80002366:	d7 03       	nop
80002368:	d7 03       	nop
8000236a:	d7 03       	nop
8000236c:	d7 03       	nop
8000236e:	d7 03       	nop
80002370:	d7 03       	nop
80002372:	d7 03       	nop
80002374:	d7 03       	nop
80002376:	d7 03       	nop
80002378:	d7 03       	nop
8000237a:	d7 03       	nop
8000237c:	d7 03       	nop
8000237e:	d7 03       	nop
80002380:	d7 03       	nop
80002382:	d7 03       	nop
80002384:	d7 03       	nop
80002386:	d7 03       	nop
80002388:	d7 03       	nop
8000238a:	d7 03       	nop
8000238c:	d7 03       	nop
8000238e:	d7 03       	nop
80002390:	d7 03       	nop
80002392:	d7 03       	nop
80002394:	d7 03       	nop
80002396:	d7 03       	nop
80002398:	d7 03       	nop
8000239a:	d7 03       	nop
8000239c:	d7 03       	nop
8000239e:	d7 03       	nop
800023a0:	d7 03       	nop
800023a2:	d7 03       	nop
800023a4:	d7 03       	nop
800023a6:	d7 03       	nop
800023a8:	d7 03       	nop
800023aa:	d7 03       	nop
800023ac:	d7 03       	nop
800023ae:	d7 03       	nop
800023b0:	d7 03       	nop
800023b2:	d7 03       	nop
800023b4:	d7 03       	nop
800023b6:	d7 03       	nop
800023b8:	d7 03       	nop
800023ba:	d7 03       	nop
800023bc:	d7 03       	nop
800023be:	d7 03       	nop
800023c0:	d7 03       	nop
800023c2:	d7 03       	nop
800023c4:	d7 03       	nop
800023c6:	d7 03       	nop
800023c8:	d7 03       	nop
800023ca:	d7 03       	nop
800023cc:	d7 03       	nop
800023ce:	d7 03       	nop
800023d0:	d7 03       	nop
800023d2:	d7 03       	nop
800023d4:	d7 03       	nop
800023d6:	d7 03       	nop
800023d8:	d7 03       	nop
800023da:	d7 03       	nop
800023dc:	d7 03       	nop
800023de:	d7 03       	nop
800023e0:	d7 03       	nop
800023e2:	d7 03       	nop
800023e4:	d7 03       	nop
800023e6:	d7 03       	nop
800023e8:	d7 03       	nop
800023ea:	d7 03       	nop
800023ec:	d7 03       	nop
800023ee:	d7 03       	nop
800023f0:	d7 03       	nop
800023f2:	d7 03       	nop
800023f4:	d7 03       	nop
800023f6:	d7 03       	nop
800023f8:	d7 03       	nop
800023fa:	d7 03       	nop
800023fc:	d7 03       	nop
800023fe:	d7 03       	nop
