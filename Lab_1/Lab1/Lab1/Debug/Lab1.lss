
Lab1.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         00000180  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .exception    00000200  80002200  80002200  00002600  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000a0  80002400  80002400  00002800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  5 .bss          000000f0  00000008  00000008  00000000  2**2
                  ALLOC
  6 .heap         0000ef08  000000f8  000000f8  00000000  2**0
                  ALLOC
  7 .comment      00000030  00000000  00000000  000028a0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000000d8  00000000  00000000  000028d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 000000a3  00000000  00000000  000029a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00000bf6  00000000  00000000  00002a4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000036b  00000000  00000000  00003641  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00000fe8  00000000  00000000  000039ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000000dc  00000000  00000000  00004994  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000062c  00000000  00000000  00004a70  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0000024c  00000000  00000000  0000509c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macinfo 001dc105  00000000  00000000  000052e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 18 .debug_ranges 00000098  00000000  00000000  001e13f0  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:
80000000:	fe cf df c0 	sub	pc,pc,-8256

80000004 <_trampoline>:
80000004:	e0 8f 10 00 	bral	80002004 <program_start>
	...

80002004 <program_start>:
80002004:	fe cf ff c4 	sub	pc,pc,-60

Disassembly of section .text:

80002008 <_get_interrupt_handler>:
80002008:	fe 78 08 00 	mov	r8,-63488
8000200c:	e0 69 00 83 	mov	r9,131
80002010:	f2 0c 01 0c 	sub	r12,r9,r12
80002014:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
80002018:	f2 ca ff c0 	sub	r10,r9,-64
8000201c:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80002020:	58 08       	cp.w	r8,0
80002022:	c0 21       	brne	80002026 <_get_interrupt_handler+0x1e>
80002024:	5e fd       	retal	0
80002026:	f0 08 12 00 	clz	r8,r8
8000202a:	48 5a       	lddpc	r10,8000203c <_get_interrupt_handler+0x34>
8000202c:	f4 09 00 39 	add	r9,r10,r9<<0x3
80002030:	f0 08 11 1f 	rsub	r8,r8,31
80002034:	72 19       	ld.w	r9,r9[0x4]
80002036:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
8000203a:	5e fc       	retal	r12
8000203c:	80 00       	ld.sh	r0,r0[0x0]
8000203e:	24 00       	sub	r0,64

80002040 <_stext>:
80002040:	e0 7d 00 00 	mov	sp,65536
80002044:	fe c0 fe 44 	sub	r0,pc,-444
80002048:	e3 b0 00 01 	mtsr	0x4,r0
8000204c:	d5 53       	csrf	0x15
8000204e:	30 80       	mov	r0,8
80002050:	30 81       	mov	r1,8
80002052:	02 30       	cp.w	r0,r1
80002054:	c0 72       	brcc	80002062 <idata_load_loop_end>
80002056:	fe c2 fb b6 	sub	r2,pc,-1098

8000205a <idata_load_loop>:
8000205a:	a5 05       	ld.d	r4,r2++
8000205c:	a1 24       	st.d	r0++,r4
8000205e:	02 30       	cp.w	r0,r1
80002060:	cf d3       	brcs	8000205a <idata_load_loop>

80002062 <idata_load_loop_end>:
80002062:	30 80       	mov	r0,8
80002064:	e0 61 00 f8 	mov	r1,248
80002068:	02 30       	cp.w	r0,r1
8000206a:	c0 62       	brcc	80002076 <udata_clear_loop_end>
8000206c:	30 02       	mov	r2,0
8000206e:	30 03       	mov	r3,0

80002070 <udata_clear_loop>:
80002070:	a1 22       	st.d	r0++,r2
80002072:	02 30       	cp.w	r0,r1
80002074:	cf e3       	brcs	80002070 <udata_clear_loop>

80002076 <udata_clear_loop_end>:
80002076:	fe cf ff a6 	sub	pc,pc,-90
8000207a:	d7 03       	nop

8000207c <mdelay>:
8000207c:	20 1d       	sub	sp,4
8000207e:	f8 0c 00 2c 	add	r12,r12,r12<<0x2
80002082:	f8 08 15 01 	lsl	r8,r12,0x1
80002086:	50 08       	stdsp	sp[0x0],r8
80002088:	40 08       	lddsp	r8,sp[0x0]
8000208a:	58 08       	cp.w	r8,0
8000208c:	c0 70       	breq	8000209a <mdelay+0x1e>
8000208e:	40 08       	lddsp	r8,sp[0x0]
#define BUTTON_PIN2 (1 << (GPIO_PUSH_BUTTON_2 & 0x1f))

void mdelay(int ms){
	long volatile cycles = (ms * CYCLES_PER_MS);
	while (cycles != 0){
		cycles--;
80002090:	20 18       	sub	r8,1
80002092:	50 08       	stdsp	sp[0x0],r8
#define BUTTON_PORT2 (GPIO_PUSH_BUTTON_2 >> 5)
#define BUTTON_PIN2 (1 << (GPIO_PUSH_BUTTON_2 & 0x1f))

void mdelay(int ms){
	long volatile cycles = (ms * CYCLES_PER_MS);
	while (cycles != 0){
80002094:	40 08       	lddsp	r8,sp[0x0]
80002096:	58 08       	cp.w	r8,0
80002098:	cf b1       	brne	8000208e <mdelay+0x12>
		cycles--;
	}
}
8000209a:	2f fd       	sub	sp,-4
8000209c:	5e fc       	retal	r12

8000209e <initLED>:

void initLED (void)
{
	volatile avr32_gpio_port_t * led0_port;
	led0_port = &AVR32_GPIO.port[LED0_PORT];
	led0_port->gpers = LED0_BIT_VALUE;
8000209e:	fe 78 11 00 	mov	r8,-61184
800020a2:	fc 19 08 00 	movh	r9,0x800
800020a6:	91 19       	st.w	r8[0x4],r9
	led0_port->ovrs = LED0_BIT_VALUE;
800020a8:	f1 49 00 54 	st.w	r8[84],r9
	led0_port->oders = LED0_BIT_VALUE;
800020ac:	f1 49 00 44 	st.w	r8[68],r9
	
	volatile avr32_gpio_port_t * led1_port;
	led1_port = &AVR32_GPIO.port[LED1_PORT];
	led1_port->gpers = LED1_BIT_VALUE;
800020b0:	fc 19 10 00 	movh	r9,0x1000
800020b4:	91 19       	st.w	r8[0x4],r9
	led1_port->ovrs = LED1_BIT_VALUE;
800020b6:	f1 49 00 54 	st.w	r8[84],r9
	led1_port->oders = LED1_BIT_VALUE;
800020ba:	f1 49 00 44 	st.w	r8[68],r9
	
	volatile avr32_gpio_port_t * led2_port;
	led2_port = &AVR32_GPIO.port[LED2_PORT];
	led2_port->gpers = LED2_BIT_VALUE;
800020be:	fc 19 20 00 	movh	r9,0x2000
800020c2:	91 19       	st.w	r8[0x4],r9
	led2_port->ovrs = LED2_BIT_VALUE;
800020c4:	f1 49 00 54 	st.w	r8[84],r9
	led2_port->oders = LED2_BIT_VALUE;
800020c8:	f1 49 00 44 	st.w	r8[68],r9
}
800020cc:	5e fc       	retal	r12
800020ce:	d7 03       	nop

800020d0 <main>:
int main (void)
{
800020d0:	d4 31       	pushm	r0-r7,lr
800020d2:	20 3d       	sub	sp,12
	
	int i;
	
	initLED ();
800020d4:	f0 1f 00 2b 	mcall	80002180 <main+0xb0>
	volatile int button_state2;
	volatile avr32_gpio_port_t * button_port2;
	button_port0 = &AVR32_GPIO.port[BUTTON_PORT2];
	
	button_port0 = &AVR32_GPIO.port[BUTTON_PORT0];
	button_port0->gpers = BUTTON_PIN0;
800020d8:	fe 78 12 00 	mov	r8,-60928
800020dc:	fc 19 01 00 	movh	r9,0x100
800020e0:	91 19       	st.w	r8[0x4],r9
	button_port0->oderc = BUTTON_PIN0;
800020e2:	f1 49 00 48 	st.w	r8[72],r9
	button_port1 = &AVR32_GPIO.port[BUTTON_PORT1];
	button_port1->gpers = BUTTON_PIN1;
800020e6:	fc 19 00 20 	movh	r9,0x20
800020ea:	91 19       	st.w	r8[0x4],r9
	button_port1->oderc = BUTTON_PIN1;
800020ec:	f1 49 00 48 	st.w	r8[72],r9
	button_port2 = &AVR32_GPIO.port[BUTTON_PORT2];
	button_port2->gpers = BUTTON_PIN2;
800020f0:	e4 69 00 00 	mov	r9,262144
800020f4:	91 19       	st.w	r8[0x4],r9
	button_port2->oderc = BUTTON_PIN2;
800020f6:	f1 49 00 48 	st.w	r8[72],r9
	
	while(1) {
		button_state0 = button_port0->pvr & BUTTON_PIN0;
800020fa:	10 92       	mov	r2,r8
		button_state1 = button_port1->pvr & BUTTON_PIN1;
		button_state2 = button_port2->pvr & BUTTON_PIN2;
		
		//Event 1
		if(!button_state0){
800020fc:	30 00       	mov	r0,0
			for(i = 0; i <= 10; i++){
				AVR32_GPIO.port[LED0_PORT].ovrs = LED0_BIT_VALUE;
800020fe:	fe 76 10 00 	mov	r6,-61440
80002102:	fc 14 08 00 	movh	r4,0x800
80002106:	08 93       	mov	r3,r4
				mdelay(300);
80002108:	e0 65 01 2c 	mov	r5,300
				mdelay(300);
			}
		}
		//Event 2
		if(button_state1){
			AVR32_GPIO.port[LED1_PORT].ovrs = LED1_BIT_VALUE;
8000210c:	fc 11 10 00 	movh	r1,0x1000
	button_port2 = &AVR32_GPIO.port[BUTTON_PORT2];
	button_port2->gpers = BUTTON_PIN2;
	button_port2->oderc = BUTTON_PIN2;
	
	while(1) {
		button_state0 = button_port0->pvr & BUTTON_PIN0;
80002110:	65 88       	ld.w	r8,r2[0x60]
80002112:	e6 18 01 00 	andh	r8,0x100,COH
80002116:	50 28       	stdsp	sp[0x8],r8
		button_state1 = button_port1->pvr & BUTTON_PIN1;
80002118:	65 88       	ld.w	r8,r2[0x60]
8000211a:	e6 18 00 20 	andh	r8,0x20,COH
8000211e:	50 18       	stdsp	sp[0x4],r8
		button_state2 = button_port2->pvr & BUTTON_PIN2;
80002120:	65 88       	ld.w	r8,r2[0x60]
80002122:	e6 18 00 04 	andh	r8,0x4,COH
80002126:	50 08       	stdsp	sp[0x0],r8
		
		//Event 1
		if(!button_state0){
80002128:	40 28       	lddsp	r8,sp[0x8]
8000212a:	58 08       	cp.w	r8,0
8000212c:	c0 f1       	brne	8000214a <main+0x7a>
8000212e:	00 97       	mov	r7,r0
			for(i = 0; i <= 10; i++){
				AVR32_GPIO.port[LED0_PORT].ovrs = LED0_BIT_VALUE;
80002130:	ed 43 01 54 	st.w	r6[340],r3
				mdelay(300);
80002134:	0a 9c       	mov	r12,r5
80002136:	f0 1f 00 14 	mcall	80002184 <main+0xb4>
				AVR32_GPIO.port[LED0_PORT].ovrc = LED0_BIT_VALUE;
8000213a:	ed 44 01 58 	st.w	r6[344],r4
				mdelay(300);
8000213e:	0a 9c       	mov	r12,r5
80002140:	f0 1f 00 11 	mcall	80002184 <main+0xb4>
		button_state1 = button_port1->pvr & BUTTON_PIN1;
		button_state2 = button_port2->pvr & BUTTON_PIN2;
		
		//Event 1
		if(!button_state0){
			for(i = 0; i <= 10; i++){
80002144:	2f f7       	sub	r7,-1
80002146:	58 b7       	cp.w	r7,11
80002148:	cf 41       	brne	80002130 <main+0x60>
				AVR32_GPIO.port[LED0_PORT].ovrc = LED0_BIT_VALUE;
				mdelay(300);
			}
		}
		//Event 2
		if(button_state1){
8000214a:	40 18       	lddsp	r8,sp[0x4]
			AVR32_GPIO.port[LED1_PORT].ovrs = LED1_BIT_VALUE;
8000214c:	58 08       	cp.w	r8,0
8000214e:	ed f1 1a 55 	st.wne	r6[0x154],r1
		}
		if(!button_state1){
80002152:	40 18       	lddsp	r8,sp[0x4]
			AVR32_GPIO.port[LED1_PORT].ovrc = LED1_BIT_VALUE;
80002154:	58 08       	cp.w	r8,0
80002156:	ed f1 0a 56 	st.weq	r6[0x158],r1
		}
		
		//Event 3
		if(!button_state2){
8000215a:	40 08       	lddsp	r8,sp[0x0]
8000215c:	58 08       	cp.w	r8,0
8000215e:	cd 91       	brne	80002110 <main+0x40>
			AVR32_GPIO.port[LED2_PORT].ovrt = LED2_BIT_VALUE;
80002160:	fc 18 20 00 	movh	r8,0x2000
80002164:	ed 48 01 5c 	st.w	r6[348],r8
			while(!button_state2){
80002168:	40 08       	lddsp	r8,sp[0x0]
8000216a:	58 08       	cp.w	r8,0
8000216c:	cd 21       	brne	80002110 <main+0x40>
				button_state2 = button_port2->pvr & BUTTON_PIN2;
8000216e:	65 88       	ld.w	r8,r2[0x60]
80002170:	e6 18 00 04 	andh	r8,0x4,COH
80002174:	50 08       	stdsp	sp[0x0],r8
		}
		
		//Event 3
		if(!button_state2){
			AVR32_GPIO.port[LED2_PORT].ovrt = LED2_BIT_VALUE;
			while(!button_state2){
80002176:	40 08       	lddsp	r8,sp[0x0]
80002178:	58 08       	cp.w	r8,0
8000217a:	cc b1       	brne	80002110 <main+0x40>
8000217c:	cf 9b       	rjmp	8000216e <main+0x9e>
8000217e:	00 00       	add	r0,r0
80002180:	80 00       	ld.sh	r0,r0[0x0]
80002182:	20 9e       	sub	lr,9
80002184:	80 00       	ld.sh	r0,r0[0x0]
80002186:	20 7c       	sub	r12,7

Disassembly of section .exception:

80002200 <_evba>:
80002200:	c0 08       	rjmp	80002200 <_evba>
	...

80002204 <_handle_TLB_Multiple_Hit>:
80002204:	c0 08       	rjmp	80002204 <_handle_TLB_Multiple_Hit>
	...

80002208 <_handle_Bus_Error_Data_Fetch>:
80002208:	c0 08       	rjmp	80002208 <_handle_Bus_Error_Data_Fetch>
	...

8000220c <_handle_Bus_Error_Instruction_Fetch>:
8000220c:	c0 08       	rjmp	8000220c <_handle_Bus_Error_Instruction_Fetch>
	...

80002210 <_handle_NMI>:
80002210:	c0 08       	rjmp	80002210 <_handle_NMI>
	...

80002214 <_handle_Instruction_Address>:
80002214:	c0 08       	rjmp	80002214 <_handle_Instruction_Address>
	...

80002218 <_handle_ITLB_Protection>:
80002218:	c0 08       	rjmp	80002218 <_handle_ITLB_Protection>
	...

8000221c <_handle_Breakpoint>:
8000221c:	c0 08       	rjmp	8000221c <_handle_Breakpoint>
	...

80002220 <_handle_Illegal_Opcode>:
80002220:	c0 08       	rjmp	80002220 <_handle_Illegal_Opcode>
	...

80002224 <_handle_Unimplemented_Instruction>:
80002224:	c0 08       	rjmp	80002224 <_handle_Unimplemented_Instruction>
	...

80002228 <_handle_Privilege_Violation>:
80002228:	c0 08       	rjmp	80002228 <_handle_Privilege_Violation>
	...

8000222c <_handle_Floating_Point>:
8000222c:	c0 08       	rjmp	8000222c <_handle_Floating_Point>
	...

80002230 <_handle_Coprocessor_Absent>:
80002230:	c0 08       	rjmp	80002230 <_handle_Coprocessor_Absent>
	...

80002234 <_handle_Data_Address_Read>:
80002234:	c0 08       	rjmp	80002234 <_handle_Data_Address_Read>
	...

80002238 <_handle_Data_Address_Write>:
80002238:	c0 08       	rjmp	80002238 <_handle_Data_Address_Write>
	...

8000223c <_handle_DTLB_Protection_Read>:
8000223c:	c0 08       	rjmp	8000223c <_handle_DTLB_Protection_Read>
	...

80002240 <_handle_DTLB_Protection_Write>:
80002240:	c0 08       	rjmp	80002240 <_handle_DTLB_Protection_Write>
	...

80002244 <_handle_DTLB_Modified>:
80002244:	c0 08       	rjmp	80002244 <_handle_DTLB_Modified>
	...

80002250 <_handle_ITLB_Miss>:
80002250:	c0 08       	rjmp	80002250 <_handle_ITLB_Miss>
	...

80002260 <_handle_DTLB_Miss_Read>:
80002260:	c0 08       	rjmp	80002260 <_handle_DTLB_Miss_Read>
	...

80002270 <_handle_DTLB_Miss_Write>:
80002270:	c0 08       	rjmp	80002270 <_handle_DTLB_Miss_Write>
	...

80002300 <_handle_Supervisor_Call>:
80002300:	c0 08       	rjmp	80002300 <_handle_Supervisor_Call>
80002302:	d7 03       	nop

80002304 <_int0>:
80002304:	30 0c       	mov	r12,0
80002306:	c8 1e       	rcall	80002008 <_get_interrupt_handler>
80002308:	58 0c       	cp.w	r12,0
8000230a:	f8 0f 17 10 	movne	pc,r12
8000230e:	d6 03       	rete

80002310 <_int1>:
80002310:	30 1c       	mov	r12,1
80002312:	c7 be       	rcall	80002008 <_get_interrupt_handler>
80002314:	58 0c       	cp.w	r12,0
80002316:	f8 0f 17 10 	movne	pc,r12
8000231a:	d6 03       	rete

8000231c <_int2>:
8000231c:	30 2c       	mov	r12,2
8000231e:	c7 5e       	rcall	80002008 <_get_interrupt_handler>
80002320:	58 0c       	cp.w	r12,0
80002322:	f8 0f 17 10 	movne	pc,r12
80002326:	d6 03       	rete

80002328 <_int3>:
80002328:	30 3c       	mov	r12,3
8000232a:	c6 fe       	rcall	80002008 <_get_interrupt_handler>
8000232c:	58 0c       	cp.w	r12,0
8000232e:	f8 0f 17 10 	movne	pc,r12
80002332:	d6 03       	rete
80002334:	d7 03       	nop
80002336:	d7 03       	nop
80002338:	d7 03       	nop
8000233a:	d7 03       	nop
8000233c:	d7 03       	nop
8000233e:	d7 03       	nop
80002340:	d7 03       	nop
80002342:	d7 03       	nop
80002344:	d7 03       	nop
80002346:	d7 03       	nop
80002348:	d7 03       	nop
8000234a:	d7 03       	nop
8000234c:	d7 03       	nop
8000234e:	d7 03       	nop
80002350:	d7 03       	nop
80002352:	d7 03       	nop
80002354:	d7 03       	nop
80002356:	d7 03       	nop
80002358:	d7 03       	nop
8000235a:	d7 03       	nop
8000235c:	d7 03       	nop
8000235e:	d7 03       	nop
80002360:	d7 03       	nop
80002362:	d7 03       	nop
80002364:	d7 03       	nop
80002366:	d7 03       	nop
80002368:	d7 03       	nop
8000236a:	d7 03       	nop
8000236c:	d7 03       	nop
8000236e:	d7 03       	nop
80002370:	d7 03       	nop
80002372:	d7 03       	nop
80002374:	d7 03       	nop
80002376:	d7 03       	nop
80002378:	d7 03       	nop
8000237a:	d7 03       	nop
8000237c:	d7 03       	nop
8000237e:	d7 03       	nop
80002380:	d7 03       	nop
80002382:	d7 03       	nop
80002384:	d7 03       	nop
80002386:	d7 03       	nop
80002388:	d7 03       	nop
8000238a:	d7 03       	nop
8000238c:	d7 03       	nop
8000238e:	d7 03       	nop
80002390:	d7 03       	nop
80002392:	d7 03       	nop
80002394:	d7 03       	nop
80002396:	d7 03       	nop
80002398:	d7 03       	nop
8000239a:	d7 03       	nop
8000239c:	d7 03       	nop
8000239e:	d7 03       	nop
800023a0:	d7 03       	nop
800023a2:	d7 03       	nop
800023a4:	d7 03       	nop
800023a6:	d7 03       	nop
800023a8:	d7 03       	nop
800023aa:	d7 03       	nop
800023ac:	d7 03       	nop
800023ae:	d7 03       	nop
800023b0:	d7 03       	nop
800023b2:	d7 03       	nop
800023b4:	d7 03       	nop
800023b6:	d7 03       	nop
800023b8:	d7 03       	nop
800023ba:	d7 03       	nop
800023bc:	d7 03       	nop
800023be:	d7 03       	nop
800023c0:	d7 03       	nop
800023c2:	d7 03       	nop
800023c4:	d7 03       	nop
800023c6:	d7 03       	nop
800023c8:	d7 03       	nop
800023ca:	d7 03       	nop
800023cc:	d7 03       	nop
800023ce:	d7 03       	nop
800023d0:	d7 03       	nop
800023d2:	d7 03       	nop
800023d4:	d7 03       	nop
800023d6:	d7 03       	nop
800023d8:	d7 03       	nop
800023da:	d7 03       	nop
800023dc:	d7 03       	nop
800023de:	d7 03       	nop
800023e0:	d7 03       	nop
800023e2:	d7 03       	nop
800023e4:	d7 03       	nop
800023e6:	d7 03       	nop
800023e8:	d7 03       	nop
800023ea:	d7 03       	nop
800023ec:	d7 03       	nop
800023ee:	d7 03       	nop
800023f0:	d7 03       	nop
800023f2:	d7 03       	nop
800023f4:	d7 03       	nop
800023f6:	d7 03       	nop
800023f8:	d7 03       	nop
800023fa:	d7 03       	nop
800023fc:	d7 03       	nop
800023fe:	d7 03       	nop
